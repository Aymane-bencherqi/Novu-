/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  JSONSchemaDto,
  JSONSchemaDto$inboundSchema,
  JSONSchemaDto$Outbound,
  JSONSchemaDto$outboundSchema,
} from "./jsonschemadto.js";

export type WorkflowTestDataResponseDto = {
  /**
   * JSON Schema for recipient data
   */
  to: JSONSchemaDto;
  /**
   * JSON Schema for payload data
   */
  payload: JSONSchemaDto;
};

/** @internal */
export const WorkflowTestDataResponseDto$inboundSchema: z.ZodType<
  WorkflowTestDataResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  to: JSONSchemaDto$inboundSchema,
  payload: JSONSchemaDto$inboundSchema,
});

/** @internal */
export type WorkflowTestDataResponseDto$Outbound = {
  to: JSONSchemaDto$Outbound;
  payload: JSONSchemaDto$Outbound;
};

/** @internal */
export const WorkflowTestDataResponseDto$outboundSchema: z.ZodType<
  WorkflowTestDataResponseDto$Outbound,
  z.ZodTypeDef,
  WorkflowTestDataResponseDto
> = z.object({
  to: JSONSchemaDto$outboundSchema,
  payload: JSONSchemaDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowTestDataResponseDto$ {
  /** @deprecated use `WorkflowTestDataResponseDto$inboundSchema` instead. */
  export const inboundSchema = WorkflowTestDataResponseDto$inboundSchema;
  /** @deprecated use `WorkflowTestDataResponseDto$outboundSchema` instead. */
  export const outboundSchema = WorkflowTestDataResponseDto$outboundSchema;
  /** @deprecated use `WorkflowTestDataResponseDto$Outbound` instead. */
  export type Outbound = WorkflowTestDataResponseDto$Outbound;
}

export function workflowTestDataResponseDtoToJSON(
  workflowTestDataResponseDto: WorkflowTestDataResponseDto,
): string {
  return JSON.stringify(
    WorkflowTestDataResponseDto$outboundSchema.parse(
      workflowTestDataResponseDto,
    ),
  );
}

export function workflowTestDataResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowTestDataResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowTestDataResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowTestDataResponseDto' from JSON`,
  );
}
