/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Format validation for strings
 */
export const JsonSchemaFormatEnum = {
  Date: "date",
  Time: "time",
  DateTime: "date-time",
  Duration: "duration",
  Email: "email",
  Hostname: "hostname",
  IdnHostname: "idn-hostname",
  Ipv4: "ipv4",
  Ipv6: "ipv6",
  JsonPointer: "json-pointer",
  RelativeJsonPointer: "relative-json-pointer",
  Regex: "regex",
  Uri: "uri",
  UriReference: "uri-reference",
  UriTemplate: "uri-template",
  Url: "url",
  Uuid: "uuid",
  Guid: "guid",
  Phone: "phone",
  Password: "password",
  Color: "color",
} as const;
/**
 * Format validation for strings
 */
export type JsonSchemaFormatEnum = ClosedEnum<typeof JsonSchemaFormatEnum>;

/** @internal */
export const JsonSchemaFormatEnum$inboundSchema: z.ZodNativeEnum<
  typeof JsonSchemaFormatEnum
> = z.nativeEnum(JsonSchemaFormatEnum);

/** @internal */
export const JsonSchemaFormatEnum$outboundSchema: z.ZodNativeEnum<
  typeof JsonSchemaFormatEnum
> = JsonSchemaFormatEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchemaFormatEnum$ {
  /** @deprecated use `JsonSchemaFormatEnum$inboundSchema` instead. */
  export const inboundSchema = JsonSchemaFormatEnum$inboundSchema;
  /** @deprecated use `JsonSchemaFormatEnum$outboundSchema` instead. */
  export const outboundSchema = JsonSchemaFormatEnum$outboundSchema;
}
