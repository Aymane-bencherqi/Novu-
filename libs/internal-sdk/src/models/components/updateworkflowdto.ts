/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PreferencesRequestDto,
  PreferencesRequestDto$inboundSchema,
  PreferencesRequestDto$Outbound,
  PreferencesRequestDto$outboundSchema,
} from "./preferencesrequestdto.js";
import {
  StepUpsertDto,
  StepUpsertDto$inboundSchema,
  StepUpsertDto$Outbound,
  StepUpsertDto$outboundSchema,
} from "./stepupsertdto.js";
import {
  WorkflowOriginEnum,
  WorkflowOriginEnum$inboundSchema,
  WorkflowOriginEnum$outboundSchema,
} from "./workfloworiginenum.js";

export type UpdateWorkflowDto = {
  /**
   * Name of the workflow
   */
  name: string;
  /**
   * Description of the workflow
   */
  description?: string | undefined;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the workflow is active
   */
  active?: boolean | undefined;
  /**
   * Workflow ID (allowed only for code-first workflows)
   */
  workflowId?: string | undefined;
  /**
   * Steps of the workflow
   */
  steps: Array<StepUpsertDto>;
  /**
   * Workflow preferences
   */
  preferences: PreferencesRequestDto;
  /**
   * Origin of the workflow
   */
  origin: WorkflowOriginEnum;
};

/** @internal */
export const UpdateWorkflowDto$inboundSchema: z.ZodType<
  UpdateWorkflowDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  workflowId: z.string().optional(),
  steps: z.array(StepUpsertDto$inboundSchema),
  preferences: PreferencesRequestDto$inboundSchema,
  origin: WorkflowOriginEnum$inboundSchema,
});

/** @internal */
export type UpdateWorkflowDto$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: Array<string> | undefined;
  active: boolean;
  workflowId?: string | undefined;
  steps: Array<StepUpsertDto$Outbound>;
  preferences: PreferencesRequestDto$Outbound;
  origin: string;
};

/** @internal */
export const UpdateWorkflowDto$outboundSchema: z.ZodType<
  UpdateWorkflowDto$Outbound,
  z.ZodTypeDef,
  UpdateWorkflowDto
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  workflowId: z.string().optional(),
  steps: z.array(StepUpsertDto$outboundSchema),
  preferences: PreferencesRequestDto$outboundSchema,
  origin: WorkflowOriginEnum$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWorkflowDto$ {
  /** @deprecated use `UpdateWorkflowDto$inboundSchema` instead. */
  export const inboundSchema = UpdateWorkflowDto$inboundSchema;
  /** @deprecated use `UpdateWorkflowDto$outboundSchema` instead. */
  export const outboundSchema = UpdateWorkflowDto$outboundSchema;
  /** @deprecated use `UpdateWorkflowDto$Outbound` instead. */
  export type Outbound = UpdateWorkflowDto$Outbound;
}

export function updateWorkflowDtoToJSON(
  updateWorkflowDto: UpdateWorkflowDto,
): string {
  return JSON.stringify(
    UpdateWorkflowDto$outboundSchema.parse(updateWorkflowDto),
  );
}

export function updateWorkflowDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWorkflowDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWorkflowDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWorkflowDto' from JSON`,
  );
}
