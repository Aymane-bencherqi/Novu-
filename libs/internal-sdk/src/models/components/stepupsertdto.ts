/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StepTypeEnum,
  StepTypeEnum$inboundSchema,
  StepTypeEnum$outboundSchema,
} from "./steptypeenum.js";

export type StepUpsertDto = {
  /**
   * Name of the step
   */
  name: string;
  /**
   * Unique identifier of the step
   */
  id?: string | undefined;
  /**
   * Type of the step
   */
  type: StepTypeEnum;
  /**
   * Control values for the step
   */
  controlValues?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const StepUpsertDto$inboundSchema: z.ZodType<
  StepUpsertDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  _id: z.string().optional(),
  type: StepTypeEnum$inboundSchema,
  controlValues: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type StepUpsertDto$Outbound = {
  name: string;
  _id?: string | undefined;
  type: string;
  controlValues?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const StepUpsertDto$outboundSchema: z.ZodType<
  StepUpsertDto$Outbound,
  z.ZodTypeDef,
  StepUpsertDto
> = z.object({
  name: z.string(),
  id: z.string().optional(),
  type: StepTypeEnum$outboundSchema,
  controlValues: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepUpsertDto$ {
  /** @deprecated use `StepUpsertDto$inboundSchema` instead. */
  export const inboundSchema = StepUpsertDto$inboundSchema;
  /** @deprecated use `StepUpsertDto$outboundSchema` instead. */
  export const outboundSchema = StepUpsertDto$outboundSchema;
  /** @deprecated use `StepUpsertDto$Outbound` instead. */
  export type Outbound = StepUpsertDto$Outbound;
}

export function stepUpsertDtoToJSON(stepUpsertDto: StepUpsertDto): string {
  return JSON.stringify(StepUpsertDto$outboundSchema.parse(stepUpsertDto));
}

export function stepUpsertDtoFromJSON(
  jsonString: string,
): SafeParseResult<StepUpsertDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepUpsertDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepUpsertDto' from JSON`,
  );
}
