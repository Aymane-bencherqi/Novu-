/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PreferencesRequestDto,
  PreferencesRequestDto$inboundSchema,
  PreferencesRequestDto$Outbound,
  PreferencesRequestDto$outboundSchema,
} from "./preferencesrequestdto.js";
import {
  StepUpsertDto,
  StepUpsertDto$inboundSchema,
  StepUpsertDto$Outbound,
  StepUpsertDto$outboundSchema,
} from "./stepupsertdto.js";
import {
  WorkflowCreationSourceEnum,
  WorkflowCreationSourceEnum$inboundSchema,
  WorkflowCreationSourceEnum$outboundSchema,
} from "./workflowcreationsourceenum.js";

export type CreateWorkflowDto = {
  /**
   * Name of the workflow
   */
  name: string;
  /**
   * Description of the workflow
   */
  description?: string | undefined;
  /**
   * Tags associated with the workflow
   */
  tags?: Array<string> | undefined;
  /**
   * Whether the workflow is active
   */
  active?: boolean | undefined;
  /**
   * Unique identifier for the workflow
   */
  workflowId: string;
  /**
   * Steps of the workflow
   */
  steps: Array<StepUpsertDto>;
  /**
   * Source of workflow creation
   */
  source: WorkflowCreationSourceEnum;
  /**
   * Workflow preferences
   */
  preferences?: PreferencesRequestDto | undefined;
};

/** @internal */
export const CreateWorkflowDto$inboundSchema: z.ZodType<
  CreateWorkflowDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  workflowId: z.string(),
  steps: z.array(StepUpsertDto$inboundSchema),
  __source: WorkflowCreationSourceEnum$inboundSchema,
  preferences: PreferencesRequestDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "__source": "source",
  });
});

/** @internal */
export type CreateWorkflowDto$Outbound = {
  name: string;
  description?: string | undefined;
  tags?: Array<string> | undefined;
  active: boolean;
  workflowId: string;
  steps: Array<StepUpsertDto$Outbound>;
  __source: string;
  preferences?: PreferencesRequestDto$Outbound | undefined;
};

/** @internal */
export const CreateWorkflowDto$outboundSchema: z.ZodType<
  CreateWorkflowDto$Outbound,
  z.ZodTypeDef,
  CreateWorkflowDto
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  tags: z.array(z.string()).optional(),
  active: z.boolean().default(false),
  workflowId: z.string(),
  steps: z.array(StepUpsertDto$outboundSchema),
  source: WorkflowCreationSourceEnum$outboundSchema,
  preferences: PreferencesRequestDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    source: "__source",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkflowDto$ {
  /** @deprecated use `CreateWorkflowDto$inboundSchema` instead. */
  export const inboundSchema = CreateWorkflowDto$inboundSchema;
  /** @deprecated use `CreateWorkflowDto$outboundSchema` instead. */
  export const outboundSchema = CreateWorkflowDto$outboundSchema;
  /** @deprecated use `CreateWorkflowDto$Outbound` instead. */
  export type Outbound = CreateWorkflowDto$Outbound;
}

export function createWorkflowDtoToJSON(
  createWorkflowDto: CreateWorkflowDto,
): string {
  return JSON.stringify(
    CreateWorkflowDto$outboundSchema.parse(createWorkflowDto),
  );
}

export function createWorkflowDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkflowDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkflowDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkflowDto' from JSON`,
  );
}
